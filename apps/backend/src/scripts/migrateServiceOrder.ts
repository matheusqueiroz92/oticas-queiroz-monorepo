import mongoose from 'mongoose';
import { Order } from '../schemas/OrderSchema';
import { Counter } from '../schemas/CounterSchema';
import { CounterService } from '../services/CounterService';
import dotenv from 'dotenv';
import connectDB from '../config/db';

dotenv.config();

/**
 * Script para migrar pedidos existentes para o novo sistema de serviceOrder autom√°tico
 */
async function migrateServiceOrder() {
  try {
    console.log('üöÄ Iniciando migra√ß√£o do serviceOrder...');
    
    await connectDB();

    // 1. Buscar todos os pedidos existentes que n√£o t√™m serviceOrder ou t√™m serviceOrder inv√°lido
    const ordersWithoutServiceOrder = await Order.find({
      $or: [
        { serviceOrder: { $exists: false } },
        { serviceOrder: null },
        { serviceOrder: "" }
      ]
    }).sort({ createdAt: 1 }); // Ordenar por data de cria√ß√£o para manter ordem

    console.log(`üìä Encontrados ${ordersWithoutServiceOrder.length} pedidos sem serviceOrder`);

    if (ordersWithoutServiceOrder.length === 0) {
      console.log('‚úÖ Todos os pedidos j√° possuem serviceOrder. Migra√ß√£o n√£o necess√°ria.');
      return;
    }

    // 2. Verificar se j√° existe um contador para serviceOrder
    let currentCounter = await CounterService.getCurrentSequence('serviceOrder');
    
    if (currentCounter === null) {
      console.log('üìù Criando contador inicial para serviceOrder come√ßando em 300000');
      currentCounter = 299999; // Come√ßar√° em 300000 no primeiro incremento
    } else {
      console.log(`üìù Contador atual encontrado: ${currentCounter}`);
    }

    // 3. Atualizar pedidos em lotes para melhor performance
    const batchSize = 100;
    let updatedCount = 0;
    let currentNumber = currentCounter + 1;

    for (let i = 0; i < ordersWithoutServiceOrder.length; i += batchSize) {
      const batch = ordersWithoutServiceOrder.slice(i, i + batchSize);
      
      console.log(`üîÑ Processando lote ${Math.floor(i / batchSize) + 1}/${Math.ceil(ordersWithoutServiceOrder.length / batchSize)}`);

      const bulkOps = batch.map(order => ({
        updateOne: {
          filter: { _id: order._id },
          update: { 
            $set: { 
              serviceOrder: currentNumber.toString() 
            } 
          }
        }
      }));

      // Incrementar currentNumber para cada pedido no lote
      currentNumber += batch.length;

      try {
        const result = await Order.bulkWrite(bulkOps);
        updatedCount += result.modifiedCount;
        console.log(`‚úÖ Lote processado: ${result.modifiedCount} pedidos atualizados`);
      } catch (error) {
        console.error(`‚ùå Erro ao processar lote:`, error);
        throw error;
      }
    }

    // 4. Atualizar o contador para o pr√≥ximo n√∫mero dispon√≠vel
    await CounterService.resetCounter('serviceOrder', currentNumber - 1);

    console.log(`‚úÖ Migra√ß√£o conclu√≠da com sucesso!`);
    console.log(`üìä Total de pedidos atualizados: ${updatedCount}`);
    console.log(`üî¢ Pr√≥ximo serviceOrder ser√°: ${currentNumber}`);

    // 5. Verificar a migra√ß√£o
    const ordersStillWithoutServiceOrder = await Order.countDocuments({
      $or: [
        { serviceOrder: { $exists: false } },
        { serviceOrder: null },
        { serviceOrder: "" }
      ]
    });

    if (ordersStillWithoutServiceOrder === 0) {
      console.log('üéâ Verifica√ß√£o conclu√≠da: Todos os pedidos agora possuem serviceOrder!');
    } else {
      console.warn(`‚ö†Ô∏è  Ainda existem ${ordersStillWithoutServiceOrder} pedidos sem serviceOrder`);
    }

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado do MongoDB');
  }
}

/**
 * Fun√ß√£o para reverter a migra√ß√£o (em caso de problemas)
 */
async function rollbackMigration() {
  try {
    console.log('üîÑ Iniciando rollback da migra√ß√£o...');
    
    await connectDB();

    // Remover serviceOrder de todos os pedidos que come√ßam com "3"
    const result = await Order.updateMany(
      { serviceOrder: /^3\d{5}$/ }, // ServiceOrder com 6 d√≠gitos come√ßando com 3
      { $unset: { serviceOrder: "" } }
    );

    console.log(`‚úÖ Rollback conclu√≠do: ${result.modifiedCount} pedidos tiveram serviceOrder removido`);

    // Remover contador
    await Counter.deleteOne({ _id: 'serviceOrder' });
    console.log('‚úÖ Contador removido');

  } catch (error) {
    console.error('‚ùå Erro durante o rollback:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado do MongoDB');
  }
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--rollback')) {
    await rollbackMigration();
  } else {
    await migrateServiceOrder();
  }
}

// Executar o script
if (require.main === module) {
  main().catch((error) => {
    console.error('üí• Erro fatal:', error);
    process.exit(1);
  });
}

export { migrateServiceOrder, rollbackMigration };